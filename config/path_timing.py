# config/path_timing.py
"""
Path segment timing configuration for AGV navigation.
Defines the time required to travel between specific path points.
This file is auto-generated from AGVPathInfos.json by tools/process_path_data.py
"""

from typing import Dict, Tuple

# Path segment timing hashtable
# Key: (point_from, point_to) tuple
# Value: travel time in seconds
PATH_SEGMENT_TIMES: Dict[Tuple[str, str], float] = {
    ("P0", "P1"): 5.91666651,
    ("P0", "P10"): 8.949999,
    ("P0", "P11"): 2.98333287,
    ("P0", "P12"): 2.48000026,
    ("P0", "P13"): 16.6035519,
    ("P0", "P14"): 13.7135525,
    ("P0", "P15"): 2.50333285,
    ("P0", "P16"): 6.083333,
    ("P0", "P17"): 6.72,
    ("P0", "P18"): 9.636667,
    ("P0", "P19"): 11.3233328,
    ("P0", "P2"): 9.02,
    ("P0", "P20"): 12.1602192,
    ("P0", "P3"): 9.656666,
    ("P0", "P4"): 11.8866653,
    ("P0", "P5"): 12.5733328,
    ("P0", "P6"): 13.63335,
    ("P0", "P7"): 15.0968876,
    ("P0", "P8"): 16.65022,
    ("P0", "P9"): 19.54022,
    ("P1", "P10"): 11.8600006,
    ("P1", "P11"): 2.9333334,
    ("P1", "P12"): 5.436666,
    ("P1", "P13"): 19.5135536,
    ("P1", "P14"): 16.6235542,
    ("P1", "P15"): 3.41333342,
    ("P1", "P16"): 8.993334,
    ("P1", "P17"): 9.630001,
    ("P1", "P18"): 12.5466671,
    ("P1", "P19"): 14.2333336,
    ("P1", "P2"): 11.93,
    ("P1", "P20"): 15.0702209,
    ("P1", "P3"): 12.5666676,
    ("P1", "P4"): 14.7966661,
    ("P1", "P5"): 15.4833336,
    ("P1", "P6"): 16.54335,
    ("P1", "P7"): 18.0068874,
    ("P1", "P8"): 19.56022,
    ("P1", "P9"): 22.45022,
    ("P10", "P11"): 10.9266663,
    ("P10", "P12"): 11.43,
    ("P10", "P13"): 9.653553,
    ("P10", "P14"): 6.76355362,
    ("P10", "P15"): 8.446667,
    ("P10", "P16"): 4.866666,
    ("P10", "P17"): 4.22999954,
    ("P10", "P18"): 2.6866672,
    ("P10", "P19"): 4.37333345,
    ("P10", "P20"): 5.21022034,
    ("P11", "P12"): 2.50333285,
    ("P11", "P13"): 18.58022,
    ("P11", "P14"): 15.69022,
    ("P11", "P15"): 2.48000026,
    ("P11", "P16"): 8.06,
    ("P11", "P17"): 8.696667,
    ("P11", "P18"): 11.6133327,
    ("P11", "P19"): 13.3,
    ("P11", "P20"): 14.1368866,
    ("P12", "P13"): 19.0835514,
    ("P12", "P14"): 16.193552,
    ("P12", "P15"): 4.983333,
    ("P12", "P16"): 8.56333351,
    ("P12", "P17"): 9.2,
    ("P12", "P18"): 12.1166658,
    ("P12", "P19"): 13.8033323,
    ("P12", "P20"): 14.6402187,
    ("P13", "P14"): 4.88999939,
    ("P13", "P15"): 16.10022,
    ("P13", "P16"): 12.52022,
    ("P13", "P17"): 11.8835526,
    ("P13", "P18"): 8.96688652,
    ("P13", "P19"): 7.28,
    ("P13", "P20"): 6.443333,
    ("P14", "P15"): 13.21022,
    ("P14", "P16"): 9.630219,
    ("P14", "P17"): 8.993553,
    ("P14", "P18"): 6.076886,
    ("P14", "P19"): 4.39000034,
    ("P14", "P20"): 3.55333328,
    ("P15", "P16"): 5.58,
    ("P15", "P17"): 6.2166667,
    ("P15", "P18"): 9.133333,
    ("P15", "P19"): 10.8200006,
    ("P15", "P20"): 11.6568871,
    ("P16", "P17"): 2.63666654,
    ("P16", "P18"): 5.55333328,
    ("P16", "P19"): 7.24,
    ("P16", "P20"): 8.076886,
    ("P17", "P18"): 4.916667,
    ("P17", "P19"): 6.603333,
    ("P17", "P20"): 7.44022,
    ("P18", "P19"): 3.68666649,
    ("P18", "P20"): 4.523553,
    ("P19", "P20"): 2.83666682,
    ("P2", "P10"): 7.80333328,
    ("P2", "P11"): 10.9966679,
    ("P2", "P12"): 11.5,
    ("P2", "P13"): 15.4568863,
    ("P2", "P14"): 12.5668869,
    ("P2", "P15"): 8.516666,
    ("P2", "P16"): 2.93666673,
    ("P2", "P17"): 3.57333326,
    ("P2", "P18"): 6.49000025,
    ("P2", "P19"): 10.1766663,
    ("P2", "P20"): 11.0135527,
    ("P2", "P3"): 2.63666654,
    ("P2", "P4"): 4.866666,
    ("P2", "P5"): 5.55333328,
    ("P2", "P6"): 12.4866829,
    ("P2", "P7"): 13.9502192,
    ("P2", "P8"): 15.5035534,
    ("P2", "P9"): 18.3935528,
    ("P3", "P10"): 7.166666,
    ("P3", "P11"): 11.6333332,
    ("P3", "P12"): 12.1366673,
    ("P3", "P13"): 14.820219,
    ("P3", "P14"): 11.93022,
    ("P3", "P15"): 9.153334,
    ("P3", "P16"): 3.57333326,
    ("P3", "P17"): 2.93666673,
    ("P3", "P18"): 5.85333347,
    ("P3", "P19"): 9.539999,
    ("P3", "P20"): 10.3768864,
    ("P3", "P4"): 4.22999954,
    ("P3", "P5"): 4.916667,
    ("P3", "P6"): 11.8500156,
    ("P3", "P7"): 13.3135529,
    ("P3", "P8"): 14.8668861,
    ("P3", "P9"): 17.7568855,
    ("P4", "P10"): 2.93666673,
    ("P4", "P11"): 13.8633327,
    ("P4", "P12"): 14.3666658,
    ("P4", "P13"): 12.5902195,
    ("P4", "P14"): 9.70022,
    ("P4", "P15"): 11.3833332,
    ("P4", "P16"): 5.80333328,
    ("P4", "P17"): 7.166666,
    ("P4", "P18"): 3.623334,
    ("P4", "P19"): 7.31000042,
    ("P4", "P20"): 8.146887,
    ("P4", "P5"): 2.6866672,
    ("P4", "P6"): 9.620016,
    ("P4", "P7"): 11.0835533,
    ("P4", "P8"): 12.6368866,
    ("P4", "P9"): 15.526886,
    ("P5", "P10"): 3.623334,
    ("P5", "P11"): 14.55,
    ("P5", "P12"): 15.0533333,
    ("P5", "P13"): 11.903553,
    ("P5", "P14"): 9.013554,
    ("P5", "P15"): 12.0700006,
    ("P5", "P16"): 6.49000025,
    ("P5", "P17"): 7.85333347,
    ("P5", "P18"): 2.93666673,
    ("P5", "P19"): 6.623333,
    ("P5", "P20"): 7.46022,
    ("P5", "P6"): 8.93335,
    ("P5", "P7"): 10.3968868,
    ("P5", "P8"): 11.95022,
    ("P5", "P9"): 14.8402195,
    ("P6", "P10"): 6.68335056,
    ("P6", "P11"): 15.6100159,
    ("P6", "P12"): 16.11335,
    ("P6", "P13"): 9.576327,
    ("P6", "P14"): 6.686328,
    ("P6", "P15"): 13.1300163,
    ("P6", "P16"): 9.550016,
    ("P6", "P17"): 8.91335,
    ("P6", "P18"): 5.9966836,
    ("P6", "P19"): 2.310018,
    ("P6", "P20"): 5.13299465,
    ("P6", "P7"): 8.069662,
    ("P6", "P8"): 9.622995,
    ("P6", "P9"): 12.5129948,
    ("P7", "P10"): 8.146887,
    ("P7", "P11"): 17.0735531,
    ("P7", "P12"): 17.5768871,
    ("P7", "P13"): 9.379999,
    ("P7", "P14"): 6.49,
    ("P7", "P15"): 14.5935535,
    ("P7", "P16"): 11.0135536,
    ("P7", "P17"): 10.3768864,
    ("P7", "P18"): 7.46022,
    ("P7", "P19"): 5.77333355,
    ("P7", "P20"): 2.93666673,
    ("P7", "P8"): 3.55333328,
    ("P7", "P9"): 6.443333,
    ("P8", "P10"): 9.70022,
    ("P8", "P11"): 18.6268883,
    ("P8", "P12"): 19.13022,
    ("P8", "P13"): 7.826667,
    ("P8", "P14"): 2.93666673,
    ("P8", "P15"): 16.1468868,
    ("P8", "P16"): 12.5668869,
    ("P8", "P17"): 11.93022,
    ("P8", "P18"): 9.013554,
    ("P8", "P19"): 7.326667,
    ("P8", "P20"): 6.49,
    ("P8", "P9"): 4.88999939,
    ("P9", "P10"): 12.5902195,
    ("P9", "P11"): 21.5168877,
    ("P9", "P12"): 22.0202179,
    ("P9", "P13"): 2.93666673,
    ("P9", "P14"): 7.826667,
    ("P9", "P15"): 19.0368862,
    ("P9", "P16"): 15.4568863,
    ("P9", "P17"): 14.820219,
    ("P9", "P18"): 11.903553,
    ("P9", "P19"): 10.2166672,
    ("P9", "P20"): 9.379999,
}


def get_travel_time(from_point: str, to_point: str) -> float:
    """
    Get travel time between two path points, considering bidirectional paths.
    
    Args:
        from_point: Starting path point (e.g., "P0")
        to_point: Destination path point (e.g., "P1")
        
    Returns:
        Travel time in seconds, or -1.0 if path not found
    """
    segment = (from_point, to_point)
    segment_reverse = (to_point, from_point)
    if segment in PATH_SEGMENT_TIMES:
        return PATH_SEGMENT_TIMES[segment]
    elif segment_reverse in PATH_SEGMENT_TIMES:
        return PATH_SEGMENT_TIMES[segment_reverse]
    else:
        return -1.0


def get_all_reachable_points(from_point: str) -> Dict[str, float]:
    """
    Get all points reachable from a given point with their travel times.
    This function considers paths to be bidirectional.
    
    Args:
        from_point: Starting path point
        
    Returns:
        Dictionary mapping destination points to travel times
    """
    reachable = {}
    for (start, end), time in PATH_SEGMENT_TIMES.items():
        if start == from_point:
            reachable[end] = time
        elif end == from_point:
            reachable[start] = time
    return reachable


def is_path_available(from_point: str, to_point: str) -> bool:
    """
    Check if a direct path exists between two points, considering bidirectional paths.
    
    Args:
        from_point: Starting path point
        to_point: Destination path point
        
    Returns:
        True if direct path exists, False otherwise
    """
    segment = (from_point, to_point)
    segment_reverse = (to_point, from_point)
    return segment in PATH_SEGMENT_TIMES or segment_reverse in PATH_SEGMENT_TIMES
